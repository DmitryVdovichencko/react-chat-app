"use strict";

var _ws = _interopRequireDefault(require("ws"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const wss = new _ws.default.Server({
  port: 8989
});
const users = [];
const messages = [];

const broadcast = (data, ws) => {
  wss.clients.forEach(client => {
    if (client.readyState === _ws.default.OPEN && client !== ws) {
      client.send(JSON.stringify(data));
    }
  });
};

wss.on('connection', ws => {
  let index;
  ws.on('message', message => {
    const data = JSON.parse(message);

    switch (data.type) {
      case 'ADD_USER':
        {
          index = users.length;
          users.push({
            name: data.name,
            id: index + 1
          });
          console.log(`hi user ${data.name}`);

          if (messages.length > 1) {
            console.log(messages[messages.length - 1]);
            messages.forEach(m => {
              const {
                message,
                author
              } = m;
              ws.send(JSON.stringify({
                type: 'ADD_MESSAGE',
                message,
                author
              }));
            });
          }

          ws.send(JSON.stringify({
            type: 'ADD_MESSAGE',
            message: `hello ${data.name}`,
            author: ''
          }));
          ws.send(JSON.stringify({
            type: 'USERS_LIST',
            users
          }));
          broadcast({
            type: 'USERS_LIST',
            users
          }, ws);
          break;
        }

      case 'ADD_MESSAGE':
        messages.push({
          message: data.message,
          author: data.author
        });
        broadcast({
          type: 'ADD_MESSAGE',
          message: data.message,
          author: data.author
        }, ws);
        break;

      default:
        break;
    }
  });
  ws.on('close', () => {
    users.splice(index, 1);
    broadcast({
      type: 'USERS_LIST',
      users
    }, ws);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJ3c3MiLCJXZWJTb2NrZXQiLCJTZXJ2ZXIiLCJwb3J0IiwidXNlcnMiLCJtZXNzYWdlcyIsImJyb2FkY2FzdCIsImRhdGEiLCJ3cyIsImNsaWVudHMiLCJmb3JFYWNoIiwiY2xpZW50IiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uIiwiaW5kZXgiLCJtZXNzYWdlIiwicGFyc2UiLCJ0eXBlIiwibGVuZ3RoIiwicHVzaCIsIm5hbWUiLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJtIiwiYXV0aG9yIiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHLElBQUlDLFlBQVVDLE1BQWQsQ0FBcUI7QUFBRUMsRUFBQUEsSUFBSSxFQUFFO0FBQVIsQ0FBckIsQ0FBWjtBQUVBLE1BQU1DLEtBQUssR0FBRyxFQUFkO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLEVBQWpCOztBQUVBLE1BQU1DLFNBQVMsR0FBRyxDQUFDQyxJQUFELEVBQU1DLEVBQU4sS0FBYTtBQUM3QlIsRUFBQUEsR0FBRyxDQUFDUyxPQUFKLENBQVlDLE9BQVosQ0FBcUJDLE1BQUQsSUFBWTtBQUM5QixRQUFJQSxNQUFNLENBQUNDLFVBQVAsS0FBc0JYLFlBQVVZLElBQWhDLElBQXdDRixNQUFNLEtBQUlILEVBQXRELEVBQXlEO0FBQ3ZERyxNQUFBQSxNQUFNLENBQUNHLElBQVAsQ0FBWUMsSUFBSSxDQUFDQyxTQUFMLENBQWVULElBQWYsQ0FBWjtBQUNEO0FBQ0YsR0FKRDtBQUtELENBTkQ7O0FBUUFQLEdBQUcsQ0FBQ2lCLEVBQUosQ0FBTyxZQUFQLEVBQXNCVCxFQUFELElBQU07QUFDekIsTUFBSVUsS0FBSjtBQUVBVixFQUFBQSxFQUFFLENBQUNTLEVBQUgsQ0FBTSxTQUFOLEVBQWtCRSxPQUFELElBQVk7QUFDM0IsVUFBTVosSUFBSSxHQUFHUSxJQUFJLENBQUNLLEtBQUwsQ0FBV0QsT0FBWCxDQUFiOztBQUNBLFlBQVFaLElBQUksQ0FBQ2MsSUFBYjtBQUNFLFdBQUssVUFBTDtBQUFpQjtBQUNmSCxVQUFBQSxLQUFLLEdBQUdkLEtBQUssQ0FBQ2tCLE1BQWQ7QUFDQWxCLFVBQUFBLEtBQUssQ0FBQ21CLElBQU4sQ0FBVztBQUFDQyxZQUFBQSxJQUFJLEVBQUVqQixJQUFJLENBQUNpQixJQUFaO0FBQWtCQyxZQUFBQSxFQUFFLEVBQUVQLEtBQUssR0FBQztBQUE1QixXQUFYO0FBQ0FRLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFdBQVVwQixJQUFJLENBQUNpQixJQUFLLEVBQWpDOztBQUNBLGNBQUluQixRQUFRLENBQUNpQixNQUFULEdBQWdCLENBQXBCLEVBQXNCO0FBQ3BCSSxZQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWXRCLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDaUIsTUFBVCxHQUFnQixDQUFqQixDQUFwQjtBQUNBakIsWUFBQUEsUUFBUSxDQUFDSyxPQUFULENBQWlCa0IsQ0FBQyxJQUFFO0FBQ2xCLG9CQUFNO0FBQUNULGdCQUFBQSxPQUFEO0FBQVVVLGdCQUFBQTtBQUFWLGtCQUFrQkQsQ0FBeEI7QUFDQXBCLGNBQUFBLEVBQUUsQ0FBQ00sSUFBSCxDQUFRQyxJQUFJLENBQUNDLFNBQUwsQ0FBZTtBQUNyQkssZ0JBQUFBLElBQUksRUFBQyxhQURnQjtBQUVyQkYsZ0JBQUFBLE9BRnFCO0FBR3JCVSxnQkFBQUE7QUFIcUIsZUFBZixDQUFSO0FBS0QsYUFQRDtBQVNEOztBQUNEckIsVUFBQUEsRUFBRSxDQUFDTSxJQUFILENBQVFDLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQ3JCSyxZQUFBQSxJQUFJLEVBQUMsYUFEZ0I7QUFFckJGLFlBQUFBLE9BQU8sRUFBRSxTQUFRWixJQUFJLENBQUNpQixJQUFLLEVBRk47QUFHckJLLFlBQUFBLE1BQU0sRUFBRTtBQUhhLFdBQWYsQ0FBUjtBQU1BckIsVUFBQUEsRUFBRSxDQUFDTSxJQUFILENBQVFDLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQ3JCSyxZQUFBQSxJQUFJLEVBQUMsWUFEZ0I7QUFFckJqQixZQUFBQTtBQUZxQixXQUFmLENBQVI7QUFLQUUsVUFBQUEsU0FBUyxDQUFDO0FBQ1JlLFlBQUFBLElBQUksRUFBQyxZQURHO0FBRVJqQixZQUFBQTtBQUZRLFdBQUQsRUFHTkksRUFITSxDQUFUO0FBTUE7QUFDRDs7QUFDRCxXQUFLLGFBQUw7QUFDRUgsUUFBQUEsUUFBUSxDQUFDa0IsSUFBVCxDQUFjO0FBQUVKLFVBQUFBLE9BQU8sRUFBQ1osSUFBSSxDQUFDWSxPQUFmO0FBQ1pVLFVBQUFBLE1BQU0sRUFBRXRCLElBQUksQ0FBQ3NCO0FBREQsU0FBZDtBQUlBdkIsUUFBQUEsU0FBUyxDQUFDO0FBQ1JlLFVBQUFBLElBQUksRUFBQyxhQURHO0FBRVJGLFVBQUFBLE9BQU8sRUFBQ1osSUFBSSxDQUFDWSxPQUZMO0FBR1JVLFVBQUFBLE1BQU0sRUFBRXRCLElBQUksQ0FBQ3NCO0FBSEwsU0FBRCxFQUlQckIsRUFKTyxDQUFUO0FBS0E7O0FBQ0Y7QUFFRTtBQWpESjtBQW1ERCxHQXJERDtBQXNEQUEsRUFBQUEsRUFBRSxDQUFDUyxFQUFILENBQU0sT0FBTixFQUFlLE1BQUk7QUFDakJiLElBQUFBLEtBQUssQ0FBQzBCLE1BQU4sQ0FBYVosS0FBYixFQUFtQixDQUFuQjtBQUNBWixJQUFBQSxTQUFTLENBQUM7QUFDUmUsTUFBQUEsSUFBSSxFQUFDLFlBREc7QUFFUmpCLE1BQUFBO0FBRlEsS0FBRCxFQUdOSSxFQUhNLENBQVQ7QUFJRCxHQU5EO0FBT0QsQ0FoRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2ViU29ja2V0IGZyb20gJ3dzJ1xuXG5jb25zdCB3c3MgPSBuZXcgV2ViU29ja2V0LlNlcnZlcih7IHBvcnQ6IDg5ODkgfSlcblxuY29uc3QgdXNlcnMgPSBbXVxuY29uc3QgbWVzc2FnZXMgPSBbXVxuXG5jb25zdCBicm9hZGNhc3QgPSAoZGF0YSx3cykgPT4ge1xuICB3c3MuY2xpZW50cy5mb3JFYWNoKChjbGllbnQpID0+IHtcbiAgICBpZiAoY2xpZW50LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOICYmIGNsaWVudCE9PSB3cyl7XG4gICAgICBjbGllbnQuc2VuZChKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICB9XG4gIH0pO1xufVxuXG53c3Mub24oJ2Nvbm5lY3Rpb24nLCAod3MpPT57XG4gIGxldCBpbmRleFxuXG4gIHdzLm9uKCdtZXNzYWdlJywgKG1lc3NhZ2UpPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2UpXG4gICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgIGNhc2UgJ0FERF9VU0VSJzoge1xuICAgICAgICBpbmRleCA9IHVzZXJzLmxlbmd0aFxuICAgICAgICB1c2Vycy5wdXNoKHtuYW1lOiBkYXRhLm5hbWUsIGlkOiBpbmRleCsxfSlcbiAgICAgICAgY29uc29sZS5sb2coYGhpIHVzZXIgJHtkYXRhLm5hbWV9YClcbiAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aD4xKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlc1ttZXNzYWdlcy5sZW5ndGgtMV0pXG4gICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChtPT57XG4gICAgICAgICAgICBjb25zdCB7bWVzc2FnZSwgYXV0aG9yfT1tXG4gICAgICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgdHlwZTonQUREX01FU1NBR0UnLFxuICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICBhdXRob3JcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgfVxuICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICB0eXBlOidBRERfTUVTU0FHRScsXG4gICAgICAgICAgbWVzc2FnZTpgaGVsbG8gJHtkYXRhLm5hbWV9YCxcbiAgICAgICAgICBhdXRob3I6ICcnXG4gICAgICAgIH0pKVxuXG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHR5cGU6J1VTRVJTX0xJU1QnLFxuICAgICAgICAgIHVzZXJzXG4gICAgICAgIH0pKVxuXG4gICAgICAgIGJyb2FkY2FzdCh7XG4gICAgICAgICAgdHlwZTonVVNFUlNfTElTVCcsXG4gICAgICAgICAgdXNlcnNcbiAgICAgICAgfSwgd3MpXG4gIFxuXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdBRERfTUVTU0FHRSc6XG4gICAgICAgIG1lc3NhZ2VzLnB1c2goeyBtZXNzYWdlOmRhdGEubWVzc2FnZSxcbiAgICAgICAgICBhdXRob3I6IGRhdGEuYXV0aG9yfSlcbiAgICAgICAgICBcbiAgICBcbiAgICAgICAgYnJvYWRjYXN0KHtcbiAgICAgICAgICB0eXBlOidBRERfTUVTU0FHRScsXG4gICAgICAgICAgbWVzc2FnZTpkYXRhLm1lc3NhZ2UsXG4gICAgICAgICAgYXV0aG9yOiBkYXRhLmF1dGhvclxuICAgICAgICB9LHdzKVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcblxuICAgICAgICBicmVha1xuICAgIH1cbiAgfSlcbiAgd3Mub24oJ2Nsb3NlJywgKCk9PntcbiAgICB1c2Vycy5zcGxpY2UoaW5kZXgsMSlcbiAgICBicm9hZGNhc3Qoe1xuICAgICAgdHlwZTonVVNFUlNfTElTVCcsXG4gICAgICB1c2Vyc1xuICAgIH0sIHdzKVxuICB9KVxufSlcbiJdfQ==